#include <stdio.h>

void insertSort(int arr[]) {
	int temp;
	//1번 요소부터 내 앞에 있는 subarray들과 대소비교 후 정렬
	for (int j = 1; j < 5; j++) {
		for (int k = 0; k < j; k++) {
			if (arr[j] < arr[k]) {
				temp = arr[j];
				arr[j] = arr[k];
				arr[k] = temp;
			}
		}
	}
	printf("The sorted array in insertsort: ");
	for (int i = 0; i < 5; i++) {
		printf("%d  ", arr[i]);
	}
}

int partition(int arr[], int low, int high) {
	int pivot = arr[low];
	int i = low; int j = high;
	//pivot 제외하고는 다 정렬될 때까지 반복
	while (i < j) {
		//오른쪽부터 시작해서 pivot보다 큰 값이 pivot의 오른쪽에 오도록
		while (pivot < arr[j]) {
			j--;
		}
		//pivot보다 작은 값이 pivot의 왼쪽에 있는 경우
		while (i < j && pivot >= arr[i]) {
			i++;
		}
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
	//pivot이랑 pivot이 있어야 할 자리에 있던 값이랑 swqp
	arr[low] = arr[i];
	arr[i] = pivot;
	return i;
}
void quickSort(int arr[], int low, int high ) {
	//subarr의 길이가 0 또는 1일 때 중지
	if (low >= high){
		return;
	}
	//1차 정렬
	int pi = partition(arr,low, high );

	//왼쪽과 오른쪽 각각 정렬
	quickSort(arr, low, pi-1);
	quickSort(arr, pi+1, high);
}

void main() {
	printf("Input 5 elements of Array: ");
	int arr[5];
	for (int i = 0; i < 5; i++) {
		scanf("%d", &arr[i]);
	}
	printf("InsertSort Result\n");
	insertSort(arr);
	printf("\n");
	printf("Input 5 elements of Array: ");
	int arr1[5];
	for (int i = 0; i < 5; i++) {
		scanf("%d", &arr1[i]);
	}
	printf("QuickSort\n");
	quickSort(arr1, 0, 4);
	for (int i = 0; i < 5; i++) {
		printf("%d  ", arr1[i]);
	}
}
