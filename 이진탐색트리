#include <stdio.h>
#include <stdlib.h>

//노드 구조체
typedef struct Node {
    int ele;
    struct Node* left;
    struct Node* right;
}Node;

//새 노드 만들기
Node* create(int value){
    Node* New = (Node*)malloc(sizeof(Node));
    New->ele = value;
    New->left = NULL;
    New->right = NULL;
    return New;
}
void insert(Node* H, int value){
    // 동일한 값 존재할 수 없음
    if (H->ele == value){
        printf("%d와 동일한 값이 이미 이진탐색트리에 존재합니다.\n", value);
        return;
    }
    else{
        // 현재 노드보다 값이 작은 경우
        if (H->ele > value){
            // 더 내려갈 노드가 없는 경우
            if (H->left == NULL){
                Node* new = create(value);
                H->left=new;
                printf("%d를 성공적으로 삽입했습니다.\n", value);
            }
            //더 내려갈 수 있는 경우
            insert(H->left, value);
        }
        // 현재 루트보다 값이 큰 경우
        else{
            // 더 내려갈 노드가 없는 경우
            if (H->right == NULL){
                Node* new = create(value);
                H->right=new;
                printf("%d를 성공적으로 삽입했습니다.\n", value);
            }
            //더 내려갈 수 있는 경우
            insert(H->right, value);
        }
    }
}

//노드 찾기
int search_Node(Node* H, int value){ 
    int level=0;
    // 비어 있지 않은 노드
    if (H != NULL) {
        //한 번에 찾은 경우(나 자신)
        if (H->ele == value) {
            printf("%d는 현재 이진탐색트리의 %d번째 레벨에 있습니다.", value, level);
            return 1;
        }
        //다음 레벨로 내려가는 경우
        else{
            level++; int found;
            //현재 노드보다 작은 값인 경우
            if (H->ele > value){
                found = search_Node(H->left, value);
                return found;
             }
            // 현재 노드보다 큰 값인 경우
            if (H->ele < value){
                found = search_Node(H->right, value);
                return found;
             }
        }
    }
    //비어 있는 노드
    printf("현재 이진탐색트리에는 %d가 없습니다.", value);
    return 0;
}

//노드 삭제
void delete(Node* H, int value){
    // 삭제하고 싶은 노드의 부모 노드 찾기
    // 자식이 없는 경우
    // 자식이 하나인 경우
    //자식이 둘인 경우
}

int main()
{   
}
