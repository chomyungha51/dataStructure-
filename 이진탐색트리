#include <stdio.h>
#include <stdlib.h>

//노드 구조체
typedef struct Node {
    char ele;
    struct Node* left;
    struct Node* right;
}Node;


//새 노드 만들기
Node* NewNode(char ele)
{
    Node* New;
    New = (Node*)malloc(sizeof(Node));
    New->ele = ele;
    New->left = NULL;
    New->right = NULL;
    return New;
}

//노드 찾기
Node* search_Node(Node* H, char ele)
{    // 비어 있지 않은 노드
    if (H != NULL) {
        //한 번에 찾은 경우(나 자신)
        if (H->ele == ele) {
            return H;
        }
        else {
            // 내 왼쪽 자식 노드인가?
            Node* tmp = search_Node(H->left, ele);
            if (tmp != NULL) {
                return tmp;
            }
            // 내 오른쪽 자식 노드인가?
            return search_Node(H->right, ele);
        }
    }
    //비어 있는 노드
    return NULL;
}

//노드 추가
void insert_Node(Node* H, char A, char B, char C)
{   //ABC는 각각 자기자신, 왼쪽, 오른쪽 노드가 됨
    H->ele = A;
    if (B != ' ')
    {
        H->left = NewNode(B);
    }
    if (C !=' ')
    {
        H->right = NewNode(C);
    }
}

//노드 삭제: 부모 노드 찾는 거 때문에 못하겠음ㅠㅠ
void delete_Node(Node* H, char A, char B, char C)
{   //ABC는 각각 제거하고싶은 노드와 그 왼쪽, 오른쪽 노드
    int i = 0; char parents = NULL; Node* t;
    if (H->left == &A);
    }
    //자식 둘 다 채워져 있는 경우
    if (B != ' ' && C != ' ')
    {
        H->left = NewNode(B);
    }
    //자식 둘 중에 하나만 있는 경우
    else if (B != ' ' || C != ' ')
    {
        H->right = NewNode(C);
    }
    //자식 둘 다 없는 경우
    else {
        H->
    }
}

int main()
{   //새로운 트리, 빈 노드 만들기
    Node* H = NewNode(NULL);
    Node* tmp;

    //사용자가 원하는 만큼의 노드 개수 입력받기
    int N;int i;
    scanf("%d", &N);
    getchar();

    //입력받은 개수만큼의 트리 만들기
    for (i = 0; i < N; i++){ 
        //루트,왼쪽,오른쪽 순으로 입력받기
        char A, B, C;
        scanf("%c %c %c", &A, &B, &C);
        getchar();

        //새로운 트리에서 A가 있는 노드 찾아서
        Node* tmp = search_Node(H, A);
        //노드 있으면 밑에 자식들 추가
        if (tmp != NULL)
            insert_Node(tmp, A, B, C);
        //없으면 트리에 새로 만들어서 추가
        else
            insert_Node(H, A, B, C);
    }
  
}
