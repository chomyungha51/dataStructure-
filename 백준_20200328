//1157: 런타임 에러 해결 못 함
#include<stdio.h>
#include<string.h>
#include<stdlib.h>

#define MAX_SIZE 100

int i; int j; char word[];int num[MAX_SIZE] = { 0, };

void main() {
    int maxCharCount = 0; int maxChar; int maxCount;
    
    printf("예제 문자열을 입력하시오: ");
    scanf("%s", word);
    int length = strlen(word);


    //대문자로 변환
    for (i = 0; i <= length; i++) {
        if ('a' >= word[i] && word[i] <= 'z') {
            word[i] -= 32;
        }
    }
    printf("%s", word);

    //각 문자별 개수 세기
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - 1; j++) {
            //앞에서 센 문자들
            if (num[i] != 0)
                break;
            //이미 센 적 있는 문자들
            else {
                if (word[i] == word[j])
                    num[i]++;
            }
        }
    }
    //개수 비교하기
    maxCount = num[0];
    maxChar = word[0];
    int idx=0;
    for (i = 1; i < length; i++) {
        if (maxCount <= num[i]) {
            maxCount = num[i];
            maxChar = word[i];
	    idx = i;
        }
	
    }    
    //최댓값이 여러 개인지 확인하기
    for (i=0; i<length;i++){
    	if (num[i]==maxcount){
		if(i==idx){
			continue;
		}
		maxCharCount++;
	}
    }
    
    //최댓값인 문자가 여러 개인지 확인하기
    if (maxCharCount >= 1)
        maxChar = '?';
    printf("%c", maxChar);
}

//1920: 런타임 에러 해결 못 함
#include <stdio.h>
#define MAX_SIZE 10

void main() {
	int i; int j; int N; int M; int count; int range[MAX_SIZE]; int data[MAX_SIZE];
	printf("N을 입력하시오: ");
	scanf("%d",&N);
	printf("N만큼의 정수를 입력하시오: ");
	for (i = 0; i < N; i++) {	
		scanf("%d", range+i);
	}
	printf("\n");
	printf("M을 입력하시오: ");
	scanf("%d", &M);
	printf("M만큼의 정수를 입력하시오: ");
	for (i = 0; i < M; i++) {
		scanf("%d", data+i);
	}
	printf("\n");

	for (i = 0; i < M; i++) {
		count = 0;
		for (j = 0; j < N; j++) {
			if (data[i] == range[j]) {
				count++;
			}
		}
		if (count > 0)
			printf("1\n");
		else
			printf("0\n");
	}
	
}

//1991
#include <stdio.h>
#include <stdlib.h>

//노드 구조
typedef struct Node {
    char ele;
    struct Node* left;
    struct Node* right;
}Node;


//새 노드 만들기
Node* NewNode(char ele)
{
    Node* New;
    New = (Node*)malloc(sizeof(Node));
    New->ele = ele;
    New->left = NULL;
    New->right = NULL;
    return New;
}

//노드 찾기
Node* search_Node(Node* H, char ele)
{    // 비어 있지 않은 노드
    if (H != NULL) {
        //한 번에 찾은 경우(나 자신)
        if (H->ele == ele) {
            return H;
        }
        else {
            // 내 왼쪽 자식 노드인가?
            Node* tmp = search_Node(H->left, ele);
            if (tmp != NULL) {
                return tmp;
            }
            // 내 오른쪽 자식 노드인가?
            return search_Node(H->right, ele);
        }
    }
    //비어 있는 노드
    return NULL;
}

//사용자가 노드 추가
void insert_Node(Node* H, char A, char B, char C)
{   //ABC는 각각 루트, 왼쪽, 오른쪽 노드가 됨
    H->ele = A;
    if (B != '.')
    {
        H->left = NewNode(B);
    }
    if (C != '.')
    {
        H->right = NewNode(C);
    }
}

//전위 순행
void print_pre(Node* H)
{    //나 자신 출력
    if (H != NULL)
        printf("%c", H->ele);
    // 왼쪽으로 계속계속 내려가서 더 이상 왼쪽 자식이 없을 때 오른쪽 아래서부터 출력
    if (H->left != NULL)
        print_pre(H->left);

    if (H->right != NULL)
        print_pre(H->right);
}

//중위 순행
void print_in(Node* H)
{   //왼쪽 자식 없을 때까지 갔다가
    if (H->left != NULL)
        print_in(H->left);
    //중간 노드 거쳐서
    if (H != NULL)
        printf("%c", H->ele);
    //오른쪽 자식 없을 때까지 내려가기
    if (H->right != NULL)
        print_in(H->right);
}

//후위 순행
void print_post(Node* H)
{   //왼쪽 자식 끝까지 갔다가
    if (H->left != NULL)
        print_post(H->left);
    // 오른쪽 자식 끝까지 가고
    if (H->right != NULL)
        print_post(H->right);
    //마지막에 자기자신으로
    if (H != NULL)
        printf("%c", H->ele);
}


int main()
{   //새로운 노드, 빈 노드 만들기
    Node* H = NewNode(NULL);
    Node* tmp;

    //사용자가 원하는 만큼의 노드 개수 입력받기
    int N;int i;
    scanf("%d", &N);
    getchar();

    //입력받은 개수만큼의 트리 만들기
    for (i = 0; i < N; i++)
    {   //루트,왼쪽,오른쪽 순으로 입력받기
        char A, B, C;
        scanf("%c %c %c", &A, &B, &C);
        getchar();

        //빈 노드에서 A찾아서
        tmp = search_Node(H, A);
        //이미 있으면 바로 ABC삽입
        if (tmp != NULL)
            insert_Node(tmp, A, B, C);
        //없으면 새로 만들어서 삽입
        else
            insert_Node(H, A, B, C);
    }
    //전위순행
    print_pre(H);
    printf("\n");
    //중위순행
    print_in(H);
    printf("\n");
    //후위순행
    print_post(H);
}
